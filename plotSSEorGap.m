function plotSSEorGap(result, visibilityOpt, saveFlag)
    % Description: plot K - Sum of SSE and K - Gaps
    % Input:
    %     result: struct generated by function sortMultiChannel
    %     visibilityOpt: figure visibility, "on"(default) or "off"
    %     saveFlag: save the figure or not, true or false(default)
    % Output: null

    narginchk(1, 3);

    if nargin == 1
        visibilityOpt = "on";
        saveFlag = false;
    elseif nargin == 2
        saveFlag = false;
    end

    for eIndex = 1:length(result)
        Fig = figure;
        set(Fig, "outerposition", get(0, "screensize"));
        set(Fig, "Visible", visibilityOpt);

        x = min([size(result(eIndex).pcaData, 1) min(result(eIndex).KArray)]):min([size(result(eIndex).pcaData, 1) max(result(eIndex).KArray)]);
        
        try
            yyaxis left
            plot(x, result(eIndex).gaps, 'b-o', 'LineWidth', 2, 'DisplayName', 'Gap');
            ylabel('Gaps');
    
            yyaxis right
            plot(x, result(eIndex).SSEs, 'r-o', 'LineWidth', 2, 'DisplayName', 'SSE');
            ylabel('Sum of SSE');
        catch
            warning('SSEs or gaps data missing, check if K is specified by user or KselectionMethod is not "both"');
        end

        legend;
        title(['Channel: ' num2str(result(eIndex).chanIdx) ' | nSamples = ' num2str(size(result(eIndex).wave, 1)) ' | optimum K is ' num2str(result(eIndex).K)]);
        xlabel('K value');

        if saveFlag
            figPath = 'k figs';
            mkdir(figPath);
            saveas(Fig, [figPath, '\e', num2str(result(eIndex).chanIdx), '.jpg']);
            close;
        end

    end

end
