function Figs = plotSpikeAmp(varargin)
    % Description: plot amplitude distribution of each cluster
    % Input:
    %     result: struct generated by mysort
    %     visbilityOpt: "on" or "off"
    %     colors: RGB cell array of color of each cluster
    % Output:
    %     Figs: histogram

    if isstruct(varargin{1})
        result = varargin{1};
        varargin(1) = [];
    elseif isvector(varargin{1}) && isnumeric(varargin{1}) && isvector(varargin{2}) && isnumeric(varargin{2})
        result.K = 1;
        result.clusterIdx = ones(length(varargin{1}), 1);
        result.waveAmp = varargin{1};
        result.spikeTimeAll = varargin{2};
        varargin([1, 2]) = [];
    else
        error("Invalid syntax");
    end

    mIp = inputParser;
    mIp.addRequired("result", @(x) validatestruct(x, "K", @(y) validateattributes(y, 'numeric', {'scalar', 'positive', 'integer'}), ...
                                                     "clusterIdx", @(y) validateattributes(y, 'numeric', {'vector'}), ...
                                                     "waveAmp", @(y) validateattributes(y, 'numeric', {'vector'}), ...
                                                     "spikeTimeAll", @(y) validateattributes(y, 'numeric', {'vector'})));
    mIp.addParameter("visible", "on", @(x) any(validatestring(x, {'on', 'off'})));
    mIp.addParameter("colors", generateColorGrad(12, 'rgb', 'red', [1, 4, 7, 10], 'green', [2, 5, 8, 11], 'blue', [3, 6, 9, 12]), ...
                     @(x) cellfun(@(y) validateattributes(y, 'numeric', {'numel', 3, '>=', 0, '<=', 1}), x));
    mIp.parse(result, varargin{:});

    visibilityOpt = mIp.Results.visible;
    colors = mIp.Results.colors;

    for eIndex = 1:length(result)
        K = result(eIndex).K;

        % Plot
        Figs(eIndex) = figure;
        maximizeFig(Figs(eIndex));
        set(Figs(eIndex), "Visible", visibilityOpt);

        paddings = [0.05, 0.05, 0.05, 0.05];
        mAxe1 = mSubplot(Figs(eIndex), 1, 1, 1, [0.8, 1], "alignment", "center-left", "margin_left", 0, "paddings", paddings);
        mAxe2 = mSubplot(Figs(eIndex), 1, 1, 1, [0.15, 1], "alignment", "center-right", "margin_right", 0, "paddings", paddings);

        cm = uicontextmenu(Figs(eIndex));
        mAxe1.ContextMenu = cm;
        mAxe2.ContextMenu = cm;
    
        m1 = uimenu(cm, 'Text', 'Show & Hide');
        set(m1, "MenuSelectedFcn", {@menuShowAndHideFcn, Figs(eIndex), mAxe1, mAxe2});

        DTO.result = result(eIndex);
        DTO.colors = colors;
        set(Figs(eIndex), "UserData", DTO);

        colorsAll = repmat(reshape(colors, [length(colors), 1]), ceil(K / length(colors)) * length(colors), 1);
        waveAmp = result(eIndex).waveAmp;

        for kIndex = 1:K
            idx = result(eIndex).clusterIdx == kIndex;

            if isempty(find(idx, 1))
                continue;
            end

            scatter(mAxe1, result(eIndex).spikeTimeAll(idx), waveAmp(idx), 30, "filled", "MarkerFaceColor", colorsAll{kIndex}, "DisplayName", ['cluster ', num2str(kIndex)]);
            hold(mAxe1, "on");

            edges = linspace(min(waveAmp(idx)), max(waveAmp(idx)), 100);
            h = histogram(mAxe2, waveAmp(idx), "FaceColor", colorsAll{kIndex}, "FaceAlpha", 0.3, "BinEdges", edges);
            set(get(get(h, 'Annotation'), 'LegendInformation'), 'IconDisplayStyle', 'off');
            hold(mAxe2, "on");

            f = ksdensity(waveAmp(idx), edges, 'Function', 'pdf', 'BoundaryCorrection', 'reflection');
            f = mapminmax(f, 0, 1) * max(h.Values);
            plot(mAxe2, edges, f, "Color", colorsAll{kIndex}, "LineWidth", 2, "DisplayName", ['cluster ', num2str(kIndex)]);
        end

        legend(mAxe1, "Location", "best");
        xlabel(mAxe1, "Time (sec)");
        ylabel(mAxe1, "Spike amplitude (\muV)");
        title(mAxe1, "Spike amplitude over time");
        
        legend(mAxe2, "Location", "best");
        xlabel(mAxe2, "Spike amplitude (\muV)");
        ylabel(mAxe2, "Count");
        xlim(mAxe2, mAxe1.YLim);
        ylim(mAxe2, [0, inf]);
        title(mAxe2, "Spike amplitude distribution");
        mAxe2.View = [90, 90];
        mAxe2.XDir = "reverse";
    end

    return;
end

%% menuSelectedFcn
function menuShowAndHideFcn(~, ~, Fig, mAxe1, mAxe2)
    DTO = get(Fig, "UserData");
    result = DTO.result;
    colors = DTO.colors;
    K = result.K;
    [idxShow, idxHide] = clusterIdxInput(getOr(DTO, "idxShow"), getOr(DTO, "idxHide"));

    if isempty(idxShow)
        idxShow = 1:K;
    end

    temp = 1:K;
    idxShow = temp(ismember(temp, idxShow) & ~ismember(temp, idxHide));
    idxHide = temp(~ismember(temp, idxShow));
    DTO.idxShow = idxShow;
    DTO.idxHide = idxHide;
    set(Fig, "UserData", DTO);
    cla(mAxe1);
    cla(mAxe2);

    colorsAll = repmat(reshape(colors, [length(colors), 1]), ceil(K / length(colors)) * length(colors), 1);
    waveAmp = result.waveAmp;

    for kIndex = 1:K
        idx = result.clusterIdx == kIndex & ismember(result.clusterIdx, idxShow);

        if isempty(find(idx, 1))
            continue;
        end

        scatter(mAxe1, result.spikeTimeAll(idx), waveAmp(idx), 30, "filled", "MarkerFaceColor", colorsAll{kIndex}, "DisplayName", ['cluster ', num2str(kIndex)]);
        hold(mAxe1, "on");
        
        edges = linspace(min(waveAmp(idx)), max(waveAmp(idx)), 100);
        h = histogram(mAxe2, waveAmp(idx), "FaceColor", colorsAll{kIndex}, "FaceAlpha", 0.3, "BinEdges", edges);
        set(get(get(h, 'Annotation'), 'LegendInformation'), 'IconDisplayStyle', 'off');
        hold(mAxe2, "on");

        f = ksdensity(waveAmp(idx), edges, 'Function', 'pdf', 'BoundaryCorrection', 'reflection');
        f = mapminmax(f, 0, 1) * max(h.Values);
        plot(mAxe2, edges, f, "Color", colorsAll{kIndex}, "LineWidth", 2, "DisplayName", ['cluster ', num2str(kIndex)]);
    end

    xlim(mAxe2, mAxe1.YLim);
end