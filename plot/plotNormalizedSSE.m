function Figs = plotNormalizedSSE(result, visibilityOpt, colors)
    % Description: plot normalized SSE of each template on each cluster
    % Input:
    %     result: struct generated by mysort
    %     visbilityOpt: "on" or "off"
    %     colors: RGB cell array of color of each cluster
    % Output:
    %     Figs: one histogram figure for one cluster

    narginchk(1, 3);

    if nargin < 2
        visibilityOpt = "on";
    end
        
    if nargin < 3
        colors = generateColorGrad(12, 'red', [1, 4, 7, 10], 'green', [2, 5, 8, 11], 'blue', [3, 6, 9, 12]);
    end

    for eIndex = 1:length(result)
        p = 0.05;
        [crossResult, percentage, cv] = calCrossResult(result(eIndex), p);
        K = result(eIndex).K;

        % Plot
        Figs(eIndex) = figure;
        maximizeFig(Figs(eIndex));
        set(Figs(eIndex), "Visible", visibilityOpt);

        plotCol = 2;
        colorsAll = repmat(reshape(colors, [length(colors), 1]), ceil(K / length(colors)) * length(colors), 1);

        for t1 = 1:K
            mSubplot(Figs(eIndex), ceil(K / plotCol), plotCol, t1, [1, 1], [0.05, 0.05, 0.1, 0.1]);
            % similarity of template t2 on cluster t1
            for t2 = 1:K
                
                if ~isempty(crossResult{t1, t2})
                    histogram(crossResult{t1, t2}, "FaceColor", colorsAll{t2}, "DisplayName", ['template ', num2str(t2), ' (', num2str(percentage(t1, t2) * 100), '% within CI)']);
                    hold on;
                end
                
            end

            title(['cluster ', num2str(t1)]);
            xlabel('Normalized SSE of PCA data and cluster centers');
            yRange = get(gca, "YLim");

            if ~isempty(crossResult{t1, t2})

                for t2 = 1:K
                    plot([1, 1] * mean(crossResult{t1, t2}), [0, yRange(2)], "LineWidth", 2, "Color", colorsAll{t2}, "DisplayName", ['template ', num2str(t2), ' mean']);
                end
        
                plot([cv, cv], [0, yRange(2)], "k", "LineWidth", 2, "DisplayName", [num2str((1 - p) * 100), '% CI upper bound']);
                legend;
            end

        end

    end

    return;
end
