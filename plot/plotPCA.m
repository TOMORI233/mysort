function PCAFigs = plotPCA(result, PCShown, visibilityOpt, colors)
    % Description: plot raster in PCA space, dimensions specified by PCShown
    % Input:
    %     result: struct generated by mysort
    %     PCShown: a vector containing PC dimensions to be shown, length of which is either 2 or 3 (default: [1 2])
    %     visibilityOpt: figure visibility, "on"(default) or "off"
    %     colors: cell array of colors for waveform templates, each specified as
    %             an RGB triplet, a hexadecimal color code, a color name,
    %             or a short name. Same with wave plot color setting (RECOMMENDED).
    % Output:
    %     PCAFigs: PCA figures of all channels

    narginchk(1, 4);

    if nargin < 2
        PCShown = [1, 2];
    end

    if nargin < 3
        visibilityOpt = "on";
    end

    if nargin < 4
        colors = generateColorGrad(12, 'rgb', 'red', [1, 4, 7, 10], 'green', [2, 5, 8, 11], 'blue', [3, 6, 9, 12]);
    end

    PCx = PCShown(1);
    PCy = PCShown(2);

    if length(PCShown) > 2
        PCz = PCShown(3);
    end

    for eIndex = 1:length(result)
        PCAFigs(eIndex) = figure;
        % set(Fig, "outerposition", get(0, "screensize"));
        maximizeFig(PCAFigs(eIndex));
        set(PCAFigs(eIndex), "Visible", visibilityOpt);

        for index = 1:result(eIndex).K
            x = result(eIndex).pcaData(result(eIndex).clusterIdx == index, PCx);

            if isempty(x)
                continue;
            end

            y = result(eIndex).pcaData(result(eIndex).clusterIdx == index, PCy);
            cx = result(eIndex).clusterCenter(index, PCx);
            cy = result(eIndex).clusterCenter(index, PCy);

            colorsAll = repmat(reshape(colors, [length(colors), 1]), ceil(result(eIndex).K / length(colors)) * length(colors), 1);

            if exist("PCz", "var")
                z = result(eIndex).pcaData(result(eIndex).clusterIdx == index, PCz);
                cz = result(eIndex).clusterCenter(index, PCz);
                plot3(x, y, z, '.', 'MarkerSize', 12, 'Color', colorsAll{index}, 'DisplayName', ['cluster ' num2str(index)]); hold on;
                h = plot3(cx, cy, cz, 'kh', 'LineWidth', 1.2, 'MarkerSize', 15);
                grid on;
                zlabel(['PC-' num2str(PCz)]);
            else
                plot(x, y, '.', 'MarkerSize', 12, 'Color', colorsAll{index}, 'DisplayName', ['cluster ' num2str(index)]); hold on;
                h = plot(cx, cy, 'kx', 'LineWidth', 1.2, 'MarkerSize', 15);
            end

            set(get(get(h, 'Annotation'), 'LegendInformation'), 'IconDisplayStyle', 'off');
        end

        % Noise
        nx = result(eIndex).pcaData(result(eIndex).clusterIdx == 0, PCx);
        ny = result(eIndex).pcaData(result(eIndex).clusterIdx == 0, PCy);

        if exist("PCz", "var")
            nz = result(eIndex).pcaData(result(eIndex).clusterIdx == 0, PCz);
            plot3(nx, ny, nz, 'ko', 'DisplayName', 'Noise');
        else
            plot(nx, ny, 'ko', 'DisplayName', 'Noise');
        end

        % Origin data
        % plot(result(eIndex).pcaData(:, PCx), result(eIndex).pcaData(:, PCy), 'k.', 'MarkerSize', 12, 'DisplayName', 'Origin');

        legend;
        title(['Channel: ', num2str(result(eIndex).chanIdx), ' | nSamples = ', num2str(size(result(eIndex).wave, 1))]);
        xlabel(['PC-' num2str(PCx)]);
        ylabel(['PC-' num2str(PCy)]);
    end

    return;
end
