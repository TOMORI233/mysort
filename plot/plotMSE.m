function MSEFigs = plotMSE(result, visibilityOpt, colors)
    % Description: plot MSE of each template on each cluster
    % Input:
    %     result: struct generated by mysort
    % Output:
    %     Figs: one histogram figure for one cluster

    narginchk(1, 2);

    if nargin < 2
        visibilityOpt = "on";
    end
        
    if nargin < 3
        colors = generateColorGrad(12, 'red', [1, 4, 7, 10], 'green', [2, 5, 8, 11], 'blue', [3, 6, 9, 12]);
    end

    for eIndex = 1:length(result)
        Waveforms = result(eIndex).wave;
        templates = getOr(result(eIndex), "templates", genTemplates(result(eIndex)));
        K = result(eIndex).K;
        MSE = zeros(size(Waveforms, 1), K);

        for index = 1:K
            MSE(:, index) = sum((Waveforms - templates(index, :)).^2, 2) / size(templates, 2);
        end

        crossResult = cell(K);

        colorsAll = repmat(reshape(colors, [length(colors), 1]), ceil(K / length(colors)) * length(colors), 1);

        MSEFigs(eIndex) = figure;
        maximizeFig(MSEFigs(eIndex));
        set(MSEFigs(eIndex), "Visible", visibilityOpt);

        plotCol = 2;

        for t1 = 1:K
            mSubplot(MSEFigs(eIndex), ceil(result(eIndex).K / plotCol), plotCol, t1, [1, 1], [0.05, 0.05, 0.1, 0.1]);
            % similarity of template t2 on cluster t1
            for t2 = 1:K
                crossResult{t1, t2} = MSE(result(eIndex).clusterIdx == t1 | (result(eIndex).clusterIdx == t1 & result(eIndex).noiseClusterIdx == t1), t2);
                histogram(crossResult{t1, t2}, "FaceColor", colorsAll{t2}, "DisplayName", ['template ', num2str(t2)]); hold on;
            end

            title(['MSE of each template on cluster ', num2str(t1)]);
            xlabel('Mean square error of templates and spike waveforms');
            legend;
        end

    end

    return;
end
