function Figs = plotSSEorGap(sortResult, visibilityOpt)
    % Description: plot K - Sum of SSE and K - Gaps
    % Input:
    %     sortResult: struct generated by mysort
    %     visibilityOpt: figure visibility, "on"(default) or "off"
    % Output:
    %     Figs: K value versus SSE/Gap figures of all channels

    narginchk(1, 2);

    if nargin == 1
        visibilityOpt = "on";
    end

    for eIndex = 1:length(sortResult)
        Figs(eIndex) = figure("WindowState", "maximized", "Visible", visibilityOpt);

        x = min([size(sortResult(eIndex).pcaData, 1) min(sortResult(eIndex).KArray)]):min([size(sortResult(eIndex).pcaData, 1) max(sortResult(eIndex).KArray)]);

        try
            yyaxis left
            plot(x, sortResult(eIndex).gaps, 'b-o', 'LineWidth', 2, 'DisplayName', 'Gap');
            ylabel('Gaps');
        catch
            disp('Gaps data is empty.');
        end

        try
            yyaxis right
            plot(x, sortResult(eIndex).SSEs, 'r-o', 'LineWidth', 2, 'DisplayName', 'SSE');
            ylabel('Sum of SSE');
        catch
            disp('SSEs data is empty.');
        end

        if exist("exception1", "var") && exist("exception2", "var")
            disp('K is user-specified for sorting this channel');
            close(Figs);
            continue;
        end

        legend;
        title(['Channel: ' num2str(sortResult(eIndex).chanIdx) ' | nSamples = ' num2str(size(sortResult(eIndex).wave, 1)) ' | optimum K is ' num2str(sortResult(eIndex).K)]);
        xlabel('K value');
        grid on;
    end

    return;
end
