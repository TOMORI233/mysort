function [waveFigs, templateFigs] = plotWave(result, N, visibilityOpt, colors)
    % Description: plot waves of each cluster, with cluster 0 as noise
    % Input:
    %     result: struct generated by mysort
    %     N: number of waves to plot (default: 200)
    %     visibilityOpt: figure visibility, "on"(default) or "off"
    %     colors: cell array of colors for waveform templates, each specified as
    %             an RGB triplet, a hexadecimal color code, a color name,
    %             or a short name. Same with PCA plot color setting (RECOMMENDED).
    % Output: 
    %     waveFigs: figure, 200 waveforms of each cluster
    %     templateFigs: figure, waveform template of each cluster

    narginchk(1, 4);

    if nargin < 2
        N = 200;
    end

    if nargin < 3
        visibilityOpt = "on";
    end
        
    if nargin < 4
        colors = generateColorGrad(12, 'red', [1, 4, 7, 10], 'green', [2, 5, 8, 11], 'blue', [3, 6, 9, 12]);
    end

    for eIndex = 1:length(result)

        if ~isempty(result(eIndex).clusterIdx)
            waveFigs(eIndex) = figure;
            % set(Fig, "outerposition", get(0, "screensize"));
            maximizeFig(waveFigs(eIndex));
            set(waveFigs(eIndex), "Visible", visibilityOpt);

            plotCol = 2;

            result(eIndex).templates = getOr(result(eIndex), "templates", genTemplates(result(eIndex)));
            templates = [mean(result(eIndex).wave(result(eIndex).clusterIdx == 0, :), 1); result(eIndex).templates];

            % Waveforms of each cluster
            for cIndex = 0:result(eIndex).K
                plotData = result(eIndex).wave(result(eIndex).clusterIdx == cIndex, :);

                if ~isempty(plotData)
                    stdValue = std(plotData, 0, 1);

                    mSubplot(waveFigs(eIndex), ceil((result(eIndex).K + 1) / plotCol), plotCol, cIndex + 1, [1, 1], [0.05, 0.05, 0.1, 0.1]);
                    x = 1:size(plotData, 2);
                    xSmooth = linspace(min(x), max(x));
                    yMin = min(result(eIndex).wave(result(eIndex).clusterIdx ~= 0, :), [], "all");
                    yMax = max(result(eIndex).wave(result(eIndex).clusterIdx ~= 0, :), [], "all");

                    for pIndex = 1:min([N, size(plotData, 1)])
                        y = interp1(x, plotData(pIndex, :), xSmooth, 'cubic');
                        h = plot(xSmooth, y, 'b', 'DisplayName', 'Samples');
                        hold on;

                        if pIndex > 1
                            set(get(get(h, 'Annotation'), 'LegendInformation'), 'IconDisplayStyle', 'off');
                        end

                    end

                    if size(plotData, 1) > 1
                        y1 = interp1(x, templates(cIndex + 1, :) + stdValue, xSmooth, 'cubic');
                        y2 = interp1(x, templates(cIndex + 1, :) - stdValue, xSmooth, 'cubic');
                        fill([xSmooth fliplr(xSmooth)], [y1 fliplr(y2)], [230, 230, 230] / 255, 'edgealpha', '0', 'facealpha', '.6', 'DisplayName', 'Error bar');
                        plot(xSmooth, interp1(x, templates(cIndex + 1, :), xSmooth, 'cubic'), 'r', 'LineWidth', 2, 'DisplayName', 'Mean');
                    end

                    if cIndex > 0
                        title(['Channel: ' num2str(result(eIndex).chanIdx) ' | nSamples = ' num2str(size(plotData, 1)) ' | cluster ' num2str(cIndex)]);
                        ylim([yMin yMax]);
                    else
                        title(['Channel: ' num2str(result(eIndex).chanIdx) ' | nSamples = ' num2str(size(plotData, 1)) ' | noise']);
                    end

                    legend;
                    % drawnow;
                end

            end

            %Template of each cluster
            templateFigs(eIndex) = figure;
            maximizeFig(templateFigs(eIndex));
            set(templateFigs(eIndex), "Visible", visibilityOpt);
            waveLen = size(templates, 2);
            x = (1:waveLen) - floor(waveLen / 2);
            colorsAll = repmat(reshape(colors, [length(colors), 1]), ceil(result(eIndex).K / length(colors)) * length(colors), 1);

            for cIndex = 1:result(eIndex).K
                plot(x, templates(cIndex + 1, :), "Color", colorsAll{cIndex}, "LineWidth", 2, "DisplayName", ['cluster ', num2str(cIndex)]); hold on;
            end

            legend;
            grid on;
            xlim([min(x), max(x)]);
            title('Waveform Template');
            set(gca, 'GridAlpha', 0.3);
        end

    end

    return;
end
